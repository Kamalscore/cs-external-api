{
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "description": "Manage Tokens",
      "name": "Tokens"
    },
    {
      "description": "Manage Token Id based resources",
      "name": "Token Id"
    },
    {
      "description": "Manage Tenants",
      "name": "Tenants"
    },
    {
      "description": "Manage Scripts",
      "name": "Scripts"
    },
    {
      "description": "Manage Script Jobs",
      "name": "ScriptJobs"
    },
    {
      "description": "Manage Policy",
      "name": "Policy"
    },
    {
      "description": "Manage Inventory",
      "name": "Inventory"
    }
  ],
  "info": {
    "version": "1.0.0",
    "termsOfService": "http://corestack.io/",
    "contact": {
      "email": "dev@cloudenablers.com",
      "name": "Contact CloudEnablers",
      "url": null
    },
    "license": {
      "name": "CloudEnablers Inc License",
      "url": "http://corestack.io/licenses/LICENSE-2.0.html"
    },
    "description": "A Service API Wrapper!",
    "title": "Corestack External API"
  },
  "responses": {
    "ParseError": {
      "description": "When a mask can't be parsed"
    },
    "MaskError": {
      "description": "When any error occurs on mask"
    }
  },
  "basePath": "/",
  "consumes": [
    "application/json"
  ],
  "paths": {
    "/v1/auth/tokens": {
      "post": {
        "description": "<u><b>Authentication Request</b></u>: Fetches the token. Below mentioned model is the detailed one, that's obtained when the flag <i><b>is_detail_required</b></i> is <i>true</i>. Please find the model: <b>AuthResponse</b>, when the flag is <i>false</i>.",
        "tags": [
          "Tokens"
        ],
        "operationId": "post_auth_resource",
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthRequest"
            }
          },
          {
            "type": "bool",
            "default": false,
            "in": "query",
            "description": "Whether detailed response required or not.",
            "name": "is_detail_required"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AuthDetailedResponse"
            }
          }
        }
      }
    },
    "/v1/tenants": {
      "post": {
        "operationId": "post_tenant_resource",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTenantRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/TenantCreateResponse"
            }
          }
        },
        "tags": [
          "Tenants"
        ],
        "description": "Creates a new tenant."
      },
      "get": {
        "description": "List all the tenants.",
        "tags": [
          "Tenants"
        ],
        "operationId": "get_tenant_resource",
        "security": [
          {
            "apiKey": []
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TenantResponse"
            }
          }
        }
      }
    },
    "/v1/tenants/{tenant_id}": {
      "delete": {
        "operationId": "delete_tenant_resource_by_id",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "description": "Specify the tenant Id associated with the tenant",
            "in": "path",
            "name": "tenant_id",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TenantRemovalResponse"
            }
          }
        },
        "tags": [
          "Tenants"
        ],
        "description": "Deletes the tenant with the provided id."
      },
      "put": {
        "operationId": "put_tenant_resource_by_id",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "description": "Specify the tenant Id associated with the tenant",
            "in": "path",
            "name": "tenant_id",
            "required": true
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTenantRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TenantUpdateResponse"
            }
          }
        },
        "tags": [
          "Tenants"
        ],
        "description": "Updates the tenant with the provided id."
      },
      "get": {
        "operationId": "get_tenant_resource_by_id",
        "security": [
          {
            "apiKey": []
          }
        ],
        "parameters": [
          {
            "type": "string",
            "description": "Specify the tenant Id associated with the tenant",
            "in": "path",
            "name": "tenant_id",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TenantResponse"
            }
          }
        },
        "tags": [
          "Tenants"
        ],
        "description": "Gets the tenant with the provided id."
      }
    },
    "/v1/{tenant_id}/cloudaccounts": {
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "tenant_id",
          "required": true
        }
      ],
      "get": {
        "description": "Authentication Request",
        "tags": [
          "Token Id"
        ],
        "operationId": "get_auth_resource",
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ServiceAccResponse"
              }
            }
          }
        }
      }
    },
    "/v1/{tenant_id}/inventory/count": {
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "tenant_id",
          "required": true
        }
      ],
      "post": {
        "description": "Get inventory category count",
        "tags": [
          "Inventory"
        ],
        "operationId": "post_inventory_category_details",
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoryCountRequest"
            }
          },
          {
            "type": "str",
            "in": "header",
            "description": "Auth token",
            "name": "X-Auth-Token"
          },
          {
            "type": "str",
            "default": "AWS",
            "in": "query",
            "name": "service_name",
            "enum": [
              "AWS",
              "Azure"
            ],
            "description": ""
          },
          {
            "type": "str",
            "in": "header",
            "description": "Username",
            "name": "X-Auth-User"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CategoryCountResponse"
            }
          }
        }
      }
    },
    "/v1/{tenant_id}/inventory/filters": {
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "tenant_id",
          "required": true
        }
      ],
      "get": {
        "description": "Get all the available filters for the corresponding cloud.",
        "tags": [
          "Inventory"
        ],
        "operationId": "get_inventory_resource",
        "parameters": [
          {
            "type": "str",
            "in": "header",
            "description": "Auth token",
            "name": "X-Auth-Token"
          },
          {
            "type": "str",
            "default": "AWS",
            "in": "query",
            "name": "service_name",
            "enum": [
              "AWS",
              "Azure"
            ],
            "description": ""
          },
          {
            "type": "str",
            "in": "header",
            "description": "Username",
            "name": "X-Auth-User"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InventoryResponse"
            }
          }
        }
      }
    },
    "/v1/{tenant_id}/inventory/resources": {
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "tenant_id",
          "required": true
        }
      ],
      "post": {
        "description": "Get all the available filters for the corresponding cloud.",
        "tags": [
          "Inventory"
        ],
        "operationId": "post_inventory_resource",
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventoryResourceDetailsRequest"
            }
          },
          {
            "type": "str",
            "in": "header",
            "description": "Auth token",
            "name": "X-Auth-Token"
          },
          {
            "type": "str",
            "in": "header",
            "description": "Username",
            "name": "X-Auth-User"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/InventoryResourceDetails"
            }
          }
        }
      }
    },
    "/v1/{tenant_id}/policies": {
      "post": {
        "operationId": "post_policy_resource",
        "security": [
          {
            "auth_user": []
          },
          {
            "auth_token": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePolicyRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PolicyData"
            }
          }
        },
        "tags": [
          "Policy"
        ],
        "description": "Creates a new Policy."
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "tenant_id",
          "required": true
        }
      ],
      "get": {
        "description": "List all the Policies",
        "tags": [
          "Policy"
        ],
        "operationId": "get_policy_resource",
        "security": [
          {
            "auth_user": []
          },
          {
            "auth_token": []
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PolicyListResponse"
            }
          }
        }
      }
    },
    "/v1/{tenant_id}/policies/{policy_id}": {
      "delete": {
        "description": "delete policy with policy id and tenant id",
        "tags": [
          "Policy"
        ],
        "operationId": "delete_policy_resource_by_id",
        "parameters": [
          {
            "type": "string",
            "description": "Specify the tenant Id for the policy",
            "in": "path",
            "name": "tenant_id",
            "required": true
          },
          {
            "type": "string",
            "description": "specify the policy id to delete",
            "in": "path",
            "name": "policy_id",
            "required": true
          },
          {
            "type": "str",
            "in": "header",
            "description": "Auth Token",
            "name": "X-Auth-Token"
          },
          {
            "type": "str",
            "in": "header",
            "description": "Auth User",
            "name": "X-Auth-User"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PolicyRemovalResponse"
            }
          }
        }
      },
      "put": {
        "description": "update policy with policy id and tenant id",
        "tags": [
          "Policy"
        ],
        "operationId": "put_policy_resource_by_id",
        "parameters": [
          {
            "type": "string",
            "description": "Specify the tenant Id for the policy",
            "in": "path",
            "name": "tenant_id",
            "required": true
          },
          {
            "type": "string",
            "description": "specify the policy id to update",
            "in": "path",
            "name": "policy_id",
            "required": true
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePolicyRequestModel"
            }
          },
          {
            "type": "str",
            "in": "header",
            "description": "Auth Token",
            "name": "X-Auth-Token"
          },
          {
            "type": "str",
            "in": "header",
            "description": "Auth User",
            "name": "X-Auth-User"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UpdatePolicyRequest"
            }
          }
        }
      },
      "get": {
        "description": "view the created policy with policy id and tenant id",
        "tags": [
          "Policy"
        ],
        "operationId": "get_policy_resource_by_id",
        "parameters": [
          {
            "type": "string",
            "description": "Specify the tenant Id for the policy",
            "in": "path",
            "name": "tenant_id",
            "required": true
          },
          {
            "type": "string",
            "description": "specify the policy id to retrieve",
            "in": "path",
            "name": "policy_id",
            "required": true
          },
          {
            "type": "str",
            "in": "header",
            "description": "Auth Token",
            "name": "X-Auth-Token"
          },
          {
            "type": "str",
            "in": "header",
            "description": "Auth User",
            "name": "X-Auth-User"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PolicyViewResponse"
            }
          }
        }
      }
    },
    "/v1/{tenant_id}/policies/{policy_id}/{action_name}": {
      "post": {
        "description": "Execute a Policy",
        "tags": [
          "Policy"
        ],
        "operationId": "post_policy_actions_by_name",
        "parameters": [
          {
            "type": "string",
            "description": "Specify the tenant Id for the policy",
            "in": "path",
            "name": "tenant_id",
            "required": true
          },
          {
            "type": "string",
            "description": "specify the policy id to retrieve",
            "in": "path",
            "name": "policy_id",
            "required": true
          },
          {
            "type": "string",
            "description": "action to be performed example:execute",
            "in": "path",
            "name": "action_name",
            "required": true
          },
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PolicyExecuteModel"
            }
          },
          {
            "type": "str",
            "in": "header",
            "description": "Auth Token",
            "name": "X-Auth-Token"
          },
          {
            "type": "str",
            "in": "header",
            "description": "Auth User",
            "name": "X-Auth-User"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/{tenant_id}/scriptjobs/{script_job_id}": {
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "tenant_id",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "script_job_id",
          "required": true
        }
      ],
      "get": {
        "description": "View script job details.",
        "tags": [
          "ScriptJobs"
        ],
        "operationId": "get_describe_script_job",
        "security": [
          {
            "auth_user": []
          },
          {
            "auth_token": []
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ScriptJobDataView"
            }
          }
        }
      }
    },
    "/v1/{tenant_id}/scripts": {
      "post": {
        "operationId": "CreateScript",
        "security": [
          {
            "auth_user": []
          },
          {
            "auth_token": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateScriptRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreateScriptResponse"
            }
          }
        },
        "tags": [
          "Scripts"
        ],
        "description": "Creates a new script."
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "tenant_id",
          "required": true
        }
      ],
      "get": {
        "operationId": "ListScript",
        "security": [
          {
            "auth_user": []
          },
          {
            "auth_token": []
          }
        ],
        "parameters": [
          {
            "type": "str",
            "in": "query",
            "description": "Script types to filter",
            "enum": [
              "chef",
              "ansible",
              "puppet",
              "shell"
            ],
            "name": "types"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ScriptListResponse"
            }
          }
        },
        "tags": [
          "Scripts"
        ],
        "description": "List all the scripts."
      }
    },
    "/v1/{tenant_id}/scripts/execute": {
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "tenant_id",
          "required": true
        }
      ],
      "post": {
        "operationId": "ExecuteScript",
        "security": [
          {
            "auth_user": []
          },
          {
            "auth_token": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExecuteScriptRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "Execution Initiated",
            "schema": {
              "$ref": "#/definitions/ExecuteResponse"
            }
          }
        },
        "tags": [
          "Scripts"
        ],
        "description": "Execute a script."
      }
    },
    "/v1/{tenant_id}/scripts/scan": {
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "tenant_id",
          "required": true
        }
      ],
      "post": {
        "operationId": "ScanScript",
        "security": [
          {
            "auth_user": []
          },
          {
            "auth_token": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ScriptScanRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "201": {
            "description": "Scanned",
            "schema": {
              "$ref": "#/definitions/CreateScriptResponse"
            }
          }
        },
        "tags": [
          "Scripts"
        ],
        "description": "Scans a script to check if all dependencies(if any) are satisfied. This API will also return parameters available in script for chef and parameter & hosts available in the script for ansible"
      }
    },
    "/v1/{tenant_id}/scripts/{script_id}": {
      "delete": {
        "description": "Deletes a script.",
        "tags": [
          "Scripts"
        ],
        "operationId": "DeleteScript",
        "security": [
          {
            "auth_user": []
          },
          {
            "auth_token": []
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "Deleted",
            "schema": {
              "$ref": "#/definitions/CreateScriptResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "in": "path",
          "name": "script_id",
          "required": true
        },
        {
          "type": "string",
          "in": "path",
          "name": "tenant_id",
          "required": true
        }
      ],
      "get": {
        "description": "View script details.",
        "tags": [
          "Scripts"
        ],
        "operationId": "DescribeScript",
        "security": [
          {
            "auth_user": []
          },
          {
            "auth_token": []
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ScriptDataView"
            }
          }
        }
      },
      "put": {
        "operationId": "UpdateScript",
        "security": [
          {
            "auth_user": []
          },
          {
            "auth_token": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateScriptRequest"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/CreateScriptResponse"
            }
          }
        },
        "tags": [
          "Scripts"
        ],
        "description": "Updates a script."
      }
    }
  },
  "swagger": "2.0",
  "securityDefinitions": {
    "auth_token": {
      "type": "apiKey",
      "in": "header",
      "name": "X-Auth-Token"
    },
    "auth_user": {
      "type": "apiKey",
      "in": "header",
      "name": "X-Auth-User"
    }
  },
  "definitions": {
    "CreateScriptRequest": {
      "properties": {
        "scanned_parameters": {
          "description": "Parameter object scanned by corestack",
          "allOf": [
            {
              "$ref": "#/definitions/Dict"
            }
          ]
        },
        "scope": {
          "type": "string",
          "description": "Scope of the script",
          "example": "private",
          "enum": [
            "private",
            "account",
            "tenant"
          ]
        },
        "script_info": {
          "type": "array",
          "items": {
            "description": "script info",
            "allOf": [
              {
                "$ref": "#/definitions/ScriptInfo"
              }
            ]
          }
        },
        "operating_system": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "ubuntu",
            "enum": [
              "ubuntu",
              "centos",
              "fedora",
              "redhat",
              "windows"
            ]
          },
          "description": "OS supported by script"
        },
        "dependencies": {
          "type": "array",
          "items": {
            "description": "Details of the dependent scripts if any",
            "allOf": [
              {
                "$ref": "#/definitions/ScriptInfo"
              }
            ]
          }
        },
        "description": {
          "type": "string",
          "description": "Description about script"
        },
        "category": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "Application",
            "enum": [
              "Application",
              "Languages",
              "Database",
              "Security",
              "System",
              "Web Server",
              "Others"
            ]
          },
          "description": "Script Category"
        },
        "minimum_requirement": {
          "description": "Minimum requirements to install the script",
          "allOf": [
            {
              "$ref": "#/definitions/ScriptMinimumRequirements"
            }
          ]
        },
        "name": {
          "type": "string",
          "description": "Script Name"
        },
        "is_scanned": {
          "type": "string",
          "default": true,
          "description": "Whether the script needs to be scanned or not"
        },
        "input_source": {
          "type": "string",
          "default": "Script",
          "description": "Input source of the script during execution (Script/Resource)"
        },
        "parameters": {
          "description": "Parameters of the script.",
          "allOf": [
            {
              "$ref": "#/definitions/Dict"
            }
          ]
        },
        "playbook_yaml": {
          "type": "string",
          "description": "Playbook yaml path - mandatory for ansible scripts"
        },
        "config_type": {
          "type": "string",
          "description": "Config type of the script. Create is supported for ansible type scripts alone for now",
          "example": "ansible",
          "enum": [
            "ansible"
          ]
        },
        "uri": {
          "type": "string",
          "description": "Unique URI for script"
        },
        "platform": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "linux",
            "enum": [
              "linux",
              "windows"
            ]
          },
          "description": "Platforms supported by script."
        }
      },
      "type": "object",
      "required": [
        "category",
        "config_type",
        "name",
        "operating_system",
        "parameters",
        "platform",
        "scope"
      ]
    },
    "ServiceAccResponse": {
      "properties": {
        "message": {
          "type": "string",
          "description": "Response message."
        },
        "data": {
          "description": "Metadata Info.",
          "allOf": [
            {
              "$ref": "#/definitions/ServiceAccData"
            }
          ]
        }
      },
      "type": "object",
      "required": [
        "data",
        "message"
      ]
    },
    "ScriptJobScriptInfo": {
      "properties": {
        "script_name": {
          "type": "string",
          "description": "Script Name"
        },
        "parameters": {
          "description": "Parameters of the script.",
          "allOf": [
            {
              "$ref": "#/definitions/Dict"
            }
          ]
        },
        "config_type": {
          "type": "string",
          "description": "Config type of the script(s)"
        },
        "status": {
          "type": "string",
          "description": "Status of the script execution"
        },
        "status_reason": {
          "type": "string",
          "description": "Error message if failed"
        },
        "script_id": {
          "type": "string",
          "description": "Script Id"
        },
        "output_parameters": {
          "description": "Output parameters of the script (all applied parameters).",
          "allOf": [
            {
              "$ref": "#/definitions/Dict"
            }
          ]
        },
        "parameter_source": {
          "type": "string",
          "default": "script",
          "description": "Parameter source - whether as per the one defined in script or custom json",
          "example": "script",
          "enum": [
            "script",
            "json"
          ]
        },
        "started_at": {
          "type": "string",
          "description": "Execution start time in UTC"
        }
      },
      "type": "object",
      "required": [
        "config_type",
        "output_parameters",
        "parameters",
        "script_id",
        "script_name",
        "started_at",
        "status",
        "status_reason"
      ]
    },
    "ScriptJobInfo": {
      "properties": {
        "script_info": {
          "description": "Script execution details",
          "allOf": [
            {
              "$ref": "#/definitions/ScriptJobScriptInfo"
            }
          ]
        },
        "host": {
          "type": "string",
          "description": "Target machine's IP/DNS"
        },
        "username": {
          "type": "string",
          "description": "Username of the target machine"
        },
        "platform": {
          "type": "string",
          "description": "Platform of the target machine."
        }
      },
      "type": "object",
      "required": [
        "host",
        "platform",
        "username"
      ]
    },
    "CategoryCountResponse": {
      "properties": {
        "resource_details": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "description": "Inventory category count details"
        },
        "category_details": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "description": "Inventory category count details"
        }
      },
      "type": "object",
      "required": [
        "category_details",
        "resource_details"
      ]
    },
    "InventoryResponse": {
      "properties": {
        "filters": {
          "description": "filters available in inventory",
          "allOf": [
            {
              "$ref": "#/definitions/InventoryData"
            }
          ]
        }
      },
      "type": "object",
      "required": [
        "filters"
      ]
    },
    "AuthResponse": {
      "properties": {
        "auth_method": {
          "type": "string",
          "description": "Account Id."
        },
        "token": {
          "description": "Token.",
          "allOf": [
            {
              "$ref": "#/definitions/Token"
            }
          ]
        },
        "tenants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenTenantModel"
          },
          "description": "Tenants List."
        },
        "require_access_key": {
          "type": "boolean",
          "description": "Account Id."
        },
        "user": {
          "description": "Token.",
          "allOf": [
            {
              "$ref": "#/definitions/User"
            }
          ]
        },
        "is_account_admin": {
          "type": "boolean",
          "description": "Account Id."
        },
        "account_id": {
          "type": "string",
          "description": "Account Id."
        },
        "auth_type": {
          "type": "string",
          "description": "Account Id."
        }
      },
      "type": "object",
      "required": [
        "account_id",
        "auth_method",
        "auth_type",
        "is_account_admin",
        "require_access_key",
        "tenants",
        "token",
        "user"
      ]
    },
    "CreatePolicyRequest": {
      "properties": {
        "type": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Indicates the type of policy"
        },
        "severity": {
          "type": "string",
          "default": "",
          "description": "Severity of policy",
          "example": "low",
          "enum": [
            "low",
            "medium",
            "high"
          ]
        },
        "content": {
          "type": "string",
          "description": "The policy content"
        },
        "scope": {
          "type": "string",
          "description": "The scope of the policy (accout, tenant or private)",
          "example": "account",
          "enum": [
            "account",
            "tenant",
            "private"
          ]
        },
        "content_type": {
          "type": "string",
          "default": "",
          "description": "Policy content source (git, file)",
          "example": "git",
          "enum": [
            "git",
            "file"
          ]
        },
        "services": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Displays the service associated with the        policy, for example, AWS, AzureRM, Openstack., etc,"
        },
        "name": {
          "type": "string",
          "description": "policy name"
        },
        "sub_classification": {
          "type": "string",
          "description": "Sub classification for policy"
        },
        "classification": {
          "type": "string",
          "description": "Policies are classified based on the basis of the        activity they perform, for example provisioning, Account Management, \tUtilization, etc. This value is        displayed in this field"
        },
        "description": {
          "type": "string",
          "description": "A brief explanation of the policy."
        },
        "content_url": {
          "type": "string",
          "description": "Git project URL when the content type is git"
        },
        "content_path": {
          "type": "string",
          "description": "Root path of the policy in git repo"
        },
        "content_username": {
          "type": "string",
          "description": "Username of Git repo if repo is authenticated"
        },
        "category": {
          "type": "string",
          "description": "The category will be either service or resource"
        },
        "is_system_policy": {
          "type": "boolean"
        },
        "engine_type": {
          "type": "string",
          "default": "",
          "description": "Engine type of policy, mandatory if content type is git.",
          "example": "azure_policy",
          "enum": [
            "azure_policy",
            "aws_config",
            "chef_inspec",
            "congress"
          ]
        },
        "content_password_or_key": {
          "type": "string",
          "description": "Password or private key to access of Git repo if repo is authenticated"
        }
      },
      "type": "object",
      "required": [
        "category",
        "classification",
        "content",
        "content_type",
        "description",
        "engine_type",
        "name",
        "scope",
        "services",
        "severity",
        "sub_classification"
      ]
    },
    "PolicyDataList": {
      "properties": {
        "scope": {
          "type": "string",
          "description": "Scope of the policy"
        },
        "policy_id": {
          "type": "string",
          "description": "Policy Id"
        },
        "description": {
          "type": "string",
          "description": "A brief explanation of the policy."
        },
        "display_name": {
          "type": "string",
          "description": "Display name of policy"
        },
        "severity": {
          "type": "string",
          "description": "Severity of policy such as low, medium and high"
        },
        "status": {
          "type": "string",
          "description": "Indicates whether the policy is active or inactive."
        },
        "name": {
          "type": "string",
          "description": "Policy Name"
        },
        "content_type": {
          "type": "string",
          "description": "Content type of policy (Git or File)"
        },
        "has_recommendations": {
          "type": "boolean",
          "description": "is recommendations configured on failure of policy"
        },
        "is_parameterized": {
          "type": "boolean",
          "description": "is parameter required to execute policy"
        },
        "engine_type": {
          "type": "string",
          "description": "Engine type of policy where it will execute"
        },
        "services": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Displays the service associated with the        policy, for example, AWS, AzureRM, Openstack., etc"
        },
        "uri": {
          "type": "string",
          "description": "Unique URI for policy"
        }
      },
      "type": "object",
      "required": [
        "content_type",
        "description",
        "display_name",
        "engine_type",
        "name",
        "policy_id",
        "scope",
        "services",
        "severity",
        "status",
        "uri"
      ]
    },
    "CreateTenantRequest": {
      "properties": {
        "status": {
          "type": "boolean",
          "description": "Tenant's status.."
        },
        "description": {
          "type": "string",
          "description": "Tenant Description."
        },
        "name": {
          "type": "string",
          "description": "Tenant Name."
        },
        "metadata": {
          "description": "Metadata Info.",
          "allOf": [
            {
              "$ref": "#/definitions/TenantMetadata"
            }
          ]
        },
        "account_id": {
          "type": "string",
          "description": "Account Id."
        }
      },
      "type": "object",
      "required": [
        "account_id",
        "description",
        "metadata",
        "name",
        "status"
      ]
    },
    "InventoryData": {
      "properties": {
        "type": {
          "type": "string",
          "description": "label fields"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "description": "filters available in inventory"
        }
      },
      "type": "object",
      "required": [
        "data",
        "type"
      ]
    },
    "ScriptJobDataView": {
      "properties": {
        "script_job_id": {
          "type": "string",
          "description": "Unique ID of the Script Job"
        },
        "completed_at": {
          "type": "string",
          "description": "Script Job completion time in UTC"
        },
        "execution_type": {
          "type": "string",
          "description": "Script Job execution type (on_demand/scheduled)"
        },
        "started_at": {
          "type": "string",
          "description": "Script Job start time in UTC"
        },
        "status": {
          "type": "string",
          "description": "Overall status of the script execution"
        },
        "job_info": {
          "description": "Script execution details",
          "allOf": [
            {
              "$ref": "#/definitions/ScriptJobInfo"
            }
          ]
        },
        "status_reason": {
          "type": "string",
          "description": "Error message if failed"
        },
        "script_job_name": {
          "type": "string",
          "description": "Name of the Script Job"
        },
        "initiated_by": {
          "type": "string",
          "description": "User who initiated script execution"
        }
      },
      "type": "object",
      "required": [
        "completed_at",
        "execution_type",
        "initiated_by",
        "started_at",
        "status",
        "status_reason"
      ]
    },
    "PolicyViewResponse": {
      "properties": {
        "severity": {
          "type": "string",
          "description": "Severity of policy such as low, medium and high"
        },
        "policy_id": {
          "type": "string",
          "description": "The unique identifier created for each policy."
        },
        "content": {
          "type": "string",
          "description": "The policy content."
        },
        "scope": {
          "type": "string",
          "description": "The scope of the policy.",
          "example": "global",
          "enum": [
            "global",
            "account",
            "tenant",
            "private"
          ]
        },
        "status": {
          "type": "string",
          "description": "Indicates whether the policy is active or inactive."
        },
        "policy_name": {
          "type": "string",
          "description": "The name of the policy."
        },
        "description": {
          "type": "string",
          "description": "A brief explanation of the policy."
        },
        "sub_classification": {
          "type": "string",
          "description": "Sub classification of policy"
        },
        "classification": {
          "type": "string",
          "description": "Policies are classified based on the basis of         the activity they perform, for example provisioning, Account Management, Utilization, etc.          This value is displayed in this field."
        },
        "git_content_username": {
          "type": "string",
          "description": "Username of Git repo if repo is authenticated"
        },
        "git_content_path": {
          "type": "string",
          "description": "Root path of the policy in git repo."
        },
        "is_system_policy": {
          "type": "string",
          "description": "Flag to identify system policy"
        },
        "services": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Displays the service associated with the policy for example, AWS, AzureRM, Openstack., etc"
        },
        "git_content_url": {
          "type": "string",
          "description": "Git project URL when the content type is git."
        },
        "category": {
          "type": "string",
          "description": "The category will be either service or resource."
        },
        "engine_type": {
          "type": "string",
          "description": "Engine type of policy"
        },
        "content_type": {
          "type": "string",
          "description": "Content type of policy (Git or File)"
        },
        "uri": {
          "type": "string",
          "description": "Unique URI for policy"
        }
      },
      "type": "object",
      "required": [
        "category",
        "classification",
        "content",
        "content_type",
        "description",
        "engine_type",
        "git_content_path",
        "git_content_url",
        "git_content_username",
        "is_system_policy",
        "policy_id",
        "policy_name",
        "scope",
        "services",
        "severity",
        "status",
        "sub_classification",
        "uri"
      ]
    },
    "TenantMetadata": {
      "properties": {
        "*": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      },
      "type": "object"
    },
    "ExecuteScriptJobData": {
      "properties": {
        "script_name": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "script info"
        },
        "keypair_flag": {
          "type": "string",
          "description": "Flag to indicate whether to connect using keypair or not"
        },
        "key_file": {
          "type": "string",
          "description": "Private key content if keypair_flag is true"
        },
        "parameters": {
          "description": "Parameters of the script.",
          "allOf": [
            {
              "$ref": "#/definitions/Dict"
            }
          ]
        },
        "username": {
          "type": "string",
          "description": "Username of the target machine"
        },
        "port": {
          "type": "string",
          "description": "SSH/WinRM port"
        },
        "platform": {
          "type": "string",
          "description": "OS platform of the target machine (linux/windows)",
          "example": "linux",
          "enum": [
            "linux",
            "windows"
          ]
        },
        "password": {
          "type": "string",
          "description": "Password of the target machine's IP/DNS"
        },
        "host": {
          "type": "string",
          "description": "Target machine's IP/DNS"
        },
        "parameter_source": {
          "type": "string",
          "default": "script",
          "description": "Parameter source - whether as per the one defined in script or custom json",
          "example": "script",
          "enum": [
            "script",
            "json"
          ]
        }
      },
      "type": "object",
      "required": [
        "host",
        "key_file",
        "keypair_flag",
        "parameters",
        "platform",
        "port",
        "script_name",
        "username"
      ]
    },
    "ScriptDataList": {
      "properties": {
        "type": {
          "type": "string",
          "description": "Config type of the script"
        },
        "operating_system": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "description": "OS supported by script"
        },
        "platform": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "description": "Platforms supported by script."
        },
        "scope": {
          "type": "string",
          "description": "Scope of the script."
        },
        "status": {
          "type": "string",
          "description": "Status of the script"
        },
        "script_name": {
          "type": "string",
          "description": "Script Name"
        },
        "script_id": {
          "type": "string",
          "description": "Script Id"
        },
        "description": {
          "type": "string",
          "description": "Description about script"
        },
        "category": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "description": "Script Category"
        },
        "uri": {
          "type": "string",
          "description": "Unique URI for script"
        }
      },
      "type": "object",
      "required": [
        "category",
        "description",
        "operating_system",
        "platform",
        "scope",
        "script_id",
        "script_name",
        "status",
        "type",
        "uri"
      ]
    },
    "CreateScriptResponse": {
      "properties": {
        "script_id": {
          "type": "string",
          "description": "Unique ID of the script"
        }
      },
      "type": "object"
    },
    "User": {
      "properties": {
        "email": {
          "type": "string",
          "description": "User email."
        },
        "id": {
          "type": "string",
          "description": "User id."
        },
        "name": {
          "type": "string",
          "description": "User name."
        },
        "active_tenant_id": {
          "type": "string",
          "description": "Active tenant id."
        },
        "timezone": {
          "description": "Timezone id.",
          "allOf": [
            {
              "$ref": "#/definitions/Dict"
            }
          ]
        }
      },
      "type": "object",
      "required": [
        "active_tenant_id",
        "email",
        "id",
        "name",
        "timezone"
      ]
    },
    "ScriptDataView": {
      "properties": {
        "module_path": {
          "type": "string",
          "description": "Module path - available for puppet alone"
        },
        "cookbook_name": {
          "type": "string",
          "description": "Cookbook path - available for chef alone"
        },
        "playbook_path": {
          "type": "string",
          "description": "Playbook path - available for ansible alone"
        },
        "shell_script_path": {
          "type": "string",
          "description": "Shell script path - available for shell alone"
        },
        "operating_system": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "description": "OS supported by script"
        },
        "status": {
          "type": "string",
          "description": "Status of the script"
        },
        "updated_at": {
          "type": "string",
          "description": "Script updation time"
        },
        "description": {
          "type": "string",
          "description": "Description about script"
        },
        "parameters": {
          "description": "Parameters of the script.",
          "allOf": [
            {
              "$ref": "#/definitions/Dict"
            }
          ]
        },
        "cookbook_path": {
          "type": "string",
          "description": "Cookbook path - available for chef alone."
        },
        "type": {
          "type": "string",
          "description": "Config type of the script"
        },
        "scope": {
          "type": "string",
          "description": "Scope of the script"
        },
        "shell_script_name": {
          "type": "string",
          "description": "Shell script path - available for shell alone"
        },
        "created_by": {
          "type": "string",
          "description": "Name of the user who created the script."
        },
        "updated_by": {
          "type": "string",
          "description": "Name of the user who updated the script. "
        },
        "script_id": {
          "type": "string",
          "description": "Script Id"
        },
        "created_at": {
          "type": "string",
          "description": "Script creation time"
        },
        "category": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "description": "Script Category"
        },
        "script_name": {
          "type": "string",
          "description": "Script Name"
        },
        "module_name": {
          "type": "string",
          "description": "Module path - available for puppet alone."
        },
        "path_type": {
          "type": "string",
          "description": "Script path type such as git/url/repository(puppet_alone)/galaxy(ansible)."
        },
        "uri": {
          "type": "string",
          "description": "Unique URI for script"
        },
        "platform": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "description": "Platforms supported by script."
        },
        "playbook_name": {
          "type": "string",
          "description": "Playbook name - available for ansible alone"
        }
      },
      "type": "object",
      "required": [
        "category",
        "cookbook_name",
        "cookbook_path",
        "created_at",
        "created_by",
        "description",
        "module_name",
        "module_path",
        "operating_system",
        "parameters",
        "path_type",
        "platform",
        "playbook_name",
        "playbook_path",
        "scope",
        "script_id",
        "script_name",
        "shell_script_name",
        "shell_script_path",
        "status",
        "type",
        "updated_at",
        "updated_by",
        "uri"
      ]
    },
    "PolicyListResponse": {
      "properties": {
        "policies": {
          "description": "Policy Metadata Info.",
          "allOf": [
            {
              "$ref": "#/definitions/PolicyDataList"
            }
          ]
        }
      },
      "type": "object",
      "required": [
        "policies"
      ]
    },
    "ExecuteResponse": {
      "properties": {
        "script_job_id": {
          "type": "string",
          "description": "Unique ID of the Script Job"
        }
      },
      "type": "object"
    },
    "TenantUpdateResponse": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Tenant id."
        }
      },
      "type": "object",
      "required": [
        "id"
      ]
    },
    "ScriptListResponse": {
      "properties": {
        "scripts": {
          "description": "Metadata Info.",
          "allOf": [
            {
              "$ref": "#/definitions/ScriptDataList"
            }
          ]
        }
      },
      "type": "object",
      "required": [
        "scripts"
      ]
    },
    "ServiceAccData": {
      "properties": {
        "total_count": {
          "type": "integer",
          "description": "Total Count."
        }
      },
      "type": "object",
      "required": [
        "total_count"
      ]
    },
    "PolicyExecuteModel": {
      "properties": {
        "scope": {
          "type": "string",
          "description": "Scope of the policy"
        },
        "policy_id": {
          "type": "string",
          "description": "Policy Id"
        },
        "description": {
          "type": "string",
          "description": "A brief explanation of the policy."
        },
        "display_name": {
          "type": "string",
          "description": "Display name of policy"
        },
        "severity": {
          "type": "string",
          "description": "Severity of policy such as low, medium and high"
        },
        "status": {
          "type": "string",
          "description": "Indicates whether the policy is active or inactive."
        },
        "name": {
          "type": "string",
          "description": "Policy Name"
        },
        "content_type": {
          "type": "string",
          "description": "Content type of policy (Git or File)"
        },
        "has_recommendations": {
          "type": "boolean",
          "description": "is recommendations configured on failure of policy"
        },
        "is_parameterized": {
          "type": "boolean",
          "description": "is parameter required to execute policy"
        },
        "engine_type": {
          "type": "string",
          "description": "Engine type of policy where it will execute"
        },
        "services": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Displays the service associated with the        policy, for example, AWS, AzureRM, Openstack., etc"
        },
        "uri": {
          "type": "string",
          "description": "Unique URI for policy"
        }
      },
      "type": "object",
      "required": [
        "content_type",
        "description",
        "display_name",
        "engine_type",
        "name",
        "policy_id",
        "scope",
        "services",
        "severity",
        "status",
        "uri"
      ]
    },
    "TenantCreateResponse": {
      "properties": {
        "message": {
          "type": "string",
          "description": "Response Message."
        },
        "id": {
          "type": "string",
          "description": "Tenant id."
        }
      },
      "type": "object",
      "required": [
        "id",
        "message"
      ]
    },
    "Token": {
      "properties": {
        "expires_at": {
          "type": "string",
          "description": "Expires At Date."
        },
        "refresh_token": {
          "type": "string",
          "description": "Refresh Token."
        },
        "access_token": {
          "type": "string",
          "description": "Access Token."
        },
        "issued_at": {
          "type": "string",
          "description": "Issued At Date."
        }
      },
      "type": "object",
      "required": [
        "access_token",
        "expires_at",
        "issued_at",
        "refresh_token"
      ]
    },
    "PolicyData": {
      "properties": {
        "policy_id": {
          "type": "string",
          "description": "policy Id."
        }
      },
      "type": "object",
      "required": [
        "policy_id"
      ]
    },
    "Error": {
      "properties": {
        "message": {
          "type": "string",
          "description": "Error response message."
        }
      },
      "type": "object",
      "required": [
        "message"
      ]
    },
    "ScriptInfo": {
      "properties": {
        "path_type": {
          "type": "string",
          "description": "path_type"
        },
        "name": {
          "type": "string",
          "description": "Script Name"
        },
        "path": {
          "type": "string",
          "description": "Path of the script"
        }
      },
      "type": "object",
      "required": [
        "name",
        "path",
        "path_type"
      ]
    },
    "InventoryResourceDetailsDataModel": {
      "properties": {
        "component": {
          "type": "string",
          "description": "Name for the component"
        },
        "resource": {
          "type": "string",
          "description": "Name for the resource"
        },
        "category": {
          "type": "string",
          "description": "Name for the category"
        },
        "cloud_account": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Id of the cloud account"
        }
      },
      "type": "object"
    },
    "AuthRequest": {
      "properties": {
        "secret_key": {
          "type": "string",
          "description": "API Secret Key. This will be provided the first time when the API access key is generated. Request your admin for a new key if the secret key is lost."
        },
        "access_key": {
          "type": "string",
          "description": "API Access Key. This will be available in the My Profilepage. If not, you can request your admin for one."
        }
      },
      "type": "object",
      "required": [
        "access_key",
        "secret_key"
      ]
    },
    "UpdateTenantRequest": {
      "properties": {
        "status": {
          "type": "boolean",
          "description": "Tenant's status.."
        },
        "account_id": {
          "type": "string",
          "description": "Account Id."
        },
        "description": {
          "type": "string",
          "description": "Tenant Description."
        },
        "metadata": {
          "description": "Metadata Info.",
          "allOf": [
            {
              "$ref": "#/definitions/TenantMetadata"
            }
          ]
        }
      },
      "type": "object",
      "required": [
        "account_id"
      ]
    },
    "ScriptScanRequest": {
      "properties": {
        "file_authentication": {
          "type": "boolean",
          "default": false,
          "description": "Flag to indicate authentication required for downloading the script"
        },
        "script_info": {
          "type": "array",
          "items": {
            "description": "script info",
            "allOf": [
              {
                "$ref": "#/definitions/ScriptInfo"
              }
            ]
          }
        },
        "dependencies": {
          "type": "array",
          "items": {
            "description": "Details of the dependent scripts if any",
            "allOf": [
              {
                "$ref": "#/definitions/ScriptInfo"
              }
            ]
          }
        },
        "playbook_yaml": {
          "type": "string",
          "description": "Playbook yaml path - mandatory for ansible scripts"
        },
        "config_type": {
          "type": "string",
          "description": "Config type of the script",
          "example": "chef",
          "enum": [
            "chef",
            "ansible",
            "puppet",
            "shell"
          ]
        }
      },
      "type": "object",
      "required": [
        "config_type",
        "file_authentication"
      ]
    },
    "Dict": {
      "properties": {
        "*": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      },
      "type": "object"
    },
    "ScriptMinimumRequirements": {
      "properties": {
        "cpu": {
          "type": "integer",
          "default": 0,
          "description": "Minimum CPU core required(in MB) to install the script."
        },
        "ram(MB)": {
          "type": "number",
          "default": 0.0,
          "description": "Minimum RAM required(in MB) to install the script."
        },
        "disk(MB)": {
          "type": "number",
          "default": 0.0,
          "description": "Minimum disk space required(in MB) to install the script."
        }
      },
      "type": "object"
    },
    "PolicyMetadata": {
      "properties": {
        "file": {
          "type": "string",
          "description": "Metadata about policy"
        }
      },
      "type": "object"
    },
    "UpdatePolicyRequest": {
      "properties": {
        "updated": {
          "type": "string",
          "description": "Response Message."
        }
      },
      "type": "object",
      "required": [
        "updated"
      ]
    },
    "TokenTenantModel": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Tenant id."
        },
        "name": {
          "type": "string",
          "description": "Tenant name."
        }
      },
      "type": "object",
      "required": [
        "id",
        "name"
      ]
    },
    "PolicyRemovalResponse": {
      "properties": {
        "message": {
          "type": "string",
          "description": "Response message."
        }
      },
      "type": "object",
      "required": [
        "message"
      ]
    },
    "TenantResponse": {
      "properties": {
        "message": {
          "type": "string",
          "description": "Response Message."
        },
        "tenants": {
          "description": "Metadata Info.",
          "allOf": [
            {
              "$ref": "#/definitions/TenantMetadata"
            }
          ]
        }
      },
      "type": "object",
      "required": [
        "message",
        "tenants"
      ]
    },
    "CountDetailsDataModel": {
      "properties": {
        "service_name": {
          "type": "string",
          "description": "Name of the cloud",
          "example": "AWS",
          "enum": [
            "AWS",
            "Azure"
          ]
        },
        "category": {
          "type": "string",
          "description": "Name for the category"
        },
        "cloud_account": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Id of the cloud account"
        }
      },
      "type": "object"
    },
    "AuthDetailedResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/AuthResponse"
        },
        {
          "properties": {
            "auth_method": {
              "type": "string",
              "description": "Authentication method."
            },
            "payment": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "description": "Payment list."
            },
            "footer_text": {
              "type": "string",
              "description": "Footer text."
            },
            "workflow": {
              "description": "Workflow details",
              "allOf": [
                {
                  "$ref": "#/definitions/Dict"
                }
              ]
            },
            "require_access_key": {
              "type": "boolean",
              "description": "Whether access key required."
            },
            "audit": {
              "description": "Audit details.",
              "allOf": [
                {
                  "$ref": "#/definitions/Dict"
                }
              ]
            },
            "header_logo": {
              "type": "string",
              "description": "Header logo."
            },
            "account_id": {
              "type": "string",
              "description": "Account id."
            },
            "auth_type": {
              "type": "string",
              "description": "Authentication type."
            },
            "cost_unit": {
              "type": "string",
              "description": "Constant unit."
            },
            "cost_currency": {
              "type": "string",
              "description": "Cost currency."
            },
            "user": {
              "description": "Token.",
              "allOf": [
                {
                  "$ref": "#/definitions/User"
                }
              ]
            },
            "tenants": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "description": "Tenants list."
            },
            "is_account_admin": {
              "type": "boolean",
              "description": "Whether account admin or not."
            },
            "is_full_access": {
              "type": "boolean",
              "description": "Whether full access or not."
            },
            "subscription_details": {
              "description": "Subscription details.",
              "allOf": [
                {
                  "$ref": "#/definitions/Dict"
                }
              ]
            },
            "is_product_admin": {
              "type": "boolean",
              "description": "Whether Product admin or not."
            },
            "alias_details": {
              "description": "Alias details.",
              "allOf": [
                {
                  "$ref": "#/definitions/Dict"
                }
              ]
            },
            "token": {
              "description": "Token.",
              "allOf": [
                {
                  "$ref": "#/definitions/Token"
                }
              ]
            }
          },
          "type": "object",
          "required": [
            "account_id",
            "alias_details",
            "audit",
            "auth_method",
            "auth_type",
            "cost_currency",
            "cost_unit",
            "footer_text",
            "header_logo",
            "is_account_admin",
            "is_full_access",
            "is_product_admin",
            "payment",
            "require_access_key",
            "subscription_details",
            "tenants",
            "token",
            "user",
            "workflow"
          ]
        }
      ]
    },
    "TenantRemovalResponse": {
      "properties": {
        "message": {
          "type": "string",
          "description": "Response message."
        }
      },
      "type": "object",
      "required": [
        "message"
      ]
    },
    "ExecuteScriptRequest": {
      "properties": {
        "job_details": {
          "type": "array",
          "items": {
            "description": "Execution input such as script/host details",
            "allOf": [
              {
                "$ref": "#/definitions/ExecuteScriptJobData"
              }
            ]
          }
        },
        "job_name": {
          "type": "string",
          "description": "Name of the script job"
        },
        "config_type": {
          "type": "string",
          "description": "Config type of the script(s)"
        }
      },
      "type": "object",
      "required": [
        "job_name"
      ]
    },
    "InventoryResourceDetailsRequest": {
      "properties": {
        "filters": {
          "description": "Filter resource details",
          "allOf": [
            {
              "$ref": "#/definitions/InventoryResourceDetailsDataModel"
            }
          ]
        }
      },
      "type": "object"
    },
    "CategoryCountRequest": {
      "properties": {
        "identifier": {
          "type": "string",
          "default": "category",
          "description": "category for the cloud"
        },
        "filters": {
          "description": "Filter resource details",
          "allOf": [
            {
              "$ref": "#/definitions/CountDetailsDataModel"
            }
          ]
        }
      },
      "type": "object",
      "required": [
        "identifier"
      ]
    },
    "UpdatePolicyRequestModel": {
      "properties": {
        "type": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Indicates the type of policy"
        },
        "severity": {
          "type": "string",
          "default": "",
          "description": "Severity of policy",
          "example": "low",
          "enum": [
            "low",
            "medium",
            "high"
          ]
        },
        "content": {
          "type": "string",
          "description": "The policy content"
        },
        "metadata": {
          "description": "Metadata about policy",
          "allOf": [
            {
              "$ref": "#/definitions/PolicyMetadata"
            }
          ]
        },
        "scope": {
          "type": "string",
          "description": "The scope of the policy (global, accout, tenant or private)",
          "example": "account",
          "enum": [
            "account",
            "tenant",
            "private"
          ]
        },
        "content_type": {
          "type": "string",
          "default": "",
          "description": "Policy content source (git, file)",
          "example": "git",
          "enum": [
            "git",
            "file"
          ]
        },
        "services": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Displays the service associated with the           policy, for example, AWS, AzureRM, Openstack., etc,"
        },
        "name": {
          "type": "string",
          "description": "policy name"
        },
        "sub_classification": {
          "type": "string",
          "description": "Sub classification for policy"
        },
        "classification": {
          "type": "string",
          "description": "Policies are classified based on the basis of the           activity they perform, for example provisioning, Account Management, \tUtilization, etc. This value is           displayed in this field"
        },
        "description": {
          "type": "string",
          "description": "A brief explanation of the policy."
        },
        "content_url": {
          "type": "string",
          "description": "Git project URL when the content type is git"
        },
        "content_path": {
          "type": "string",
          "description": "Root path of the policy in git repo"
        },
        "content_username": {
          "type": "string",
          "description": "Username of Git repo if repo is authenticated"
        },
        "category": {
          "type": "string",
          "description": "The category will be either service or resource"
        },
        "is_system_policy": {
          "type": "boolean"
        },
        "engine_type": {
          "type": "string",
          "default": "",
          "description": "Engine type of policy, mandatory if content type is git.",
          "example": "azure_policy",
          "enum": [
            "azure_policy",
            "aws_config",
            "congress",
            "chef_inspec"
          ]
        },
        "content_password_or_key": {
          "type": "string",
          "description": "Password or private key to access of Git repo if repo is authenticated"
        }
      },
      "type": "object",
      "required": [
        "category",
        "classification",
        "content",
        "name",
        "scope",
        "services",
        "sub_classification"
      ]
    },
    "InventoryResourceDetails": {
      "properties": {
        "resource_details": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "description": "inventory summary details"
        },
        "count": {
          "type": "string",
          "description": "inventory count summary details"
        }
      },
      "type": "object",
      "required": [
        "count",
        "resource_details"
      ]
    }
  }
}